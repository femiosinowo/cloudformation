{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create and provision a web server",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "Server EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t1.micro",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "PrivateIpAddress": {
      "Description": " The IP address of EC2 instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.0.0.200",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "must be a valid IP of the form x.x.x.x."
    },
    "VPC": {
      "Description": "Name of an existing VPC",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "must be the name of an existing VPC."
    },
    "PublicSubnet": {
      "Description": "Name of an existing VPC",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be the name of an existing VPC."
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Resources": {
    "NewServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": "ami-4ad6a522",
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "WebServerSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": "#!/bin/sh\n/opt/aws/bin/cfn-init -s WebTest --region us-east-1 -r NewServer\n"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {

          "configSets": {
            "InstallAndRun": [

              "Install",
              "Configure"
            ]
          },
                    "Install": {
            "packages": {
              "yum": {
                "puppet": [ ],
                "httpd": [ ],
                "vim": [ ]
              }
            },

            "services": {
              "sysvinit": {
                "puppet": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }

              }
            }
          },
          "Configure": {
            "commands": {
              "01_connect_puppet_server": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "puppet config set server puppet.gcio.cloud --section agent"
                    ]
                  ]
                }
              }
            }
          }
         
        }
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Enable HTTP access via port 80",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "0b6e3447-e957-400c-bf2b-c49b1e739ea6"
        }
      }
    }
  },
  "Outputs": {
    "WebsiteURL": {
      "Description": "Information for Newly Created Server",
      "Value": {
        "Fn::Join": [
          "",
          [
            "IP=> http://",
            {
              "Fn::GetAtt": [
                "NewServer",
                "PublicDnsName"
              ]
            }
          ]
        ]
      }
    }
  }
}